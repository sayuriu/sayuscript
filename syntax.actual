Program is
	Statement[] statements

Statement is
	VariableDeclarationStatement
	or ExprStatement
	or FunctionDeclarationStatement

VariableDeclarationStatement is
	"let" Ident "=" Expr ";"

FunctionDeclarationStatement is
	(
		("action" | "compute")
		Ident fnName
		LParen
			ParameterList
		RParen
		"->" BlockExpr
	)

ExprStatement is
	StandaloneExpr ";"

StandaloneExpr is
	FnCallExpr
	or ImmediateCallExpr
	or BlockExpr
	or BinaryExpr(BinaryOperator(Eq))

ParameterList is
	Ident (Coma Ident)*

Expr is
	UnaryExpr
	or FnCallExpr
	or FnExpr
	or BinaryExpr
	or PrimaryExpr
	or TupleExpr
	or BlockExpr
	or ParenExpr

FnExpr is (
	("action" | "compute")
	Ident? fnName // might force anon fn have no name
	LParen
		ParameterList
	RParen
	"->" Expr
)

FnCallExpr is
	Ident LParen (Expr (Coma Expr)*)? RParen

ImmediateCallExpr is
	Expr LParen (Expr (Coma Expr)*)? RParen

UnaryExpr is
	UnaryOperator PrimaryExpr

BinaryExpr is
	PrimaryExpr BinaryOperator PrimaryExpr

PrimaryExpr is
	Ident
	or Literal
	or GroupedExpr

TupleExpr is
	LParen (Expr (Coma Expr)*)? RParen

ParenExpr is
	LParen Expr RParen

BlockExpr is
	("{" Statement* Expr "}")
	or ("{" Statement* "}")

Literal is
	NumberLiteral
	or StringLiteral

NumberLiteral is
	(
		(
			NonPrefixIntegerLiteral
			or FloatLiteral
		)
		(
			ExponentLiteral
		)?
	)
	or PrefixedIntegerLiteral

NonPrefixIntegerLiteral(Digit) is
	Digit+ ("_"? Digit+)*

FloatLiteral is
	Digit*
	(
		(Digit+ ".")
		or ("." Digit+)
	)
	Digit*


ExponentLiteral is
	("e" | "E") ("+" | "-")? Digit (Digit)*

PrefixIntegerLiteral is
	("0b" NonPrefixIntegerLiteral([0-1]))
	or ("0o" NonPrefixIntegerLiteral([0-7]))
	or ("0x" NonPrefixIntegerLiteral([0-9a-fA-F]))